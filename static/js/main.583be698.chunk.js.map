{"version":3,"sources":["style/imgs/syte_club_logo.png","cmps/Header.jsx","cmps/TeamPreview.jsx","cmps/TeamsList.jsx","services/storageService.js","services/HttpService.js","pages/TeamsPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Logo","alt","TeamPreview","onFavoritChange","props","toggleFav","changingLocalStor","team","name","this","onClick","class","isFav","crestLink","yearFounded","React","Component","TeamList","teams","map","key","store","value","localStorage","JSON","stringify","load","defaultValue","parse","axios","require","PORT","gTeams","a","tempTeams","storageService","length","get","data","query","TeamsPage","state","loadTeams","HttpService","setState","newTeams","changedTeams","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.583be698.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/syte_club_logo.1b3e3eac.png\";","import React from 'react'\nimport Logo from '../style/imgs/syte_club_logo.png'\n\nexport default function Header() {\n\n    return (\n        <section className=\"header flex align-center justify-center\">\n            <img className=\"logo\" src={Logo} alt=\"\"/>\n            <h1 className=\"company-name\">team-Syte</h1>\n        </section>\n    )\n}","import React from 'react'\n\n\n\nexport default class TeamPreview extends React.Component {\n\n\n// Getting props from TeamPage and rendering the team.\n    onFavoritChange = () => {\n        const { toggleFav, changingLocalStor, team } = this.props\n        toggleFav(team.name)\n\n        changingLocalStor(team.name)\n    }\n\n\n\n\n\n    render() {\n        const { team } = this.props\n\n        return <div onClick={this.onFavoritChange} className=\"team-prev\">\n\n            <button class={team.isFav ? \"fas fa-heart\" : \"far fa-heart\"}></button>\n\n            <div className=\"square\" >\n                <img className=\"crest-img\" src={team.crestLink} alt=\"\" />\n            </div>\n\n            <p className=\"team-name\">{team.name}</p>\n            <p className=\"year-founded\">{team.yearFounded}</p>\n\n\n\n\n        </div>\n\n    }\n\n}\n\n","import React from 'react'\nimport TeamPreview from './TeamPreview'\n\nexport default function TeamList(props) {\n    const { teams, toggleFav, changingLocalStor } = props\n    return (<div className=\"team-list flex  column  align-center\">\n        {teams.map(team => <TeamPreview team={team} key={team.name} toggleFav={toggleFav}  changingLocalStor={changingLocalStor}/>)}\n\n    </div>\n    )\n}\n","// Saving to local \nfunction store(key, value) {\n      localStorage[key] = JSON.stringify(value);\n\n      \n}\n\n\n// Loading from local\nfunction load(key, defaultValue = []) {\n    var value = localStorage[key];\n    if (!value) return defaultValue\n    else return JSON.parse(value);\n}\n\nexport default {\n    store,\n    load\n}","import storageService from './storageService'\n\nconst axios = require('axios');\nconst PORT = 'https://raw.githubusercontent.com/AlmogArie/kaduregel/master/db.json'\n\nvar gTeams = []\n_createTeams()\n\n//  Creating teams from local.\nfunction _createTeams() {\n    gTeams = storageService.load('teams')\n    storageService.store('teams', gTeams)\n}\n\n\n// Get data from API\nasync function query() {\n    var tempTeams = storageService.load('teams')\n    if (tempTeams.length) return tempTeams\n    const teams = await axios.get((`${PORT}`))\n            storageService.store('teams', teams.data)\n            return teams.data\n}\n\n\nexport default {\n    query,\n}","import React from 'react'\nimport TeamList from '../cmps/TeamsList'\nimport HttpService from '../services/HttpService'\nimport storageService from '../services/storageService'\n\n\nexport default class TeamsPage extends React.Component {\n\n    state = {\n        teams: []\n    }\n\n\n    componentDidMount() {\n        this.loadTeams()\n    }\n\n    // Load all teams and setting state.\n    loadTeams = async () => {\n        const teams = await HttpService.query()\n\n        this.setState({ teams })\n    }\n\n\n    // Toggeling favorit icon state.\n    toggleFav = (name) => {\n        const { teams } = this.state\n        const newTeams = teams.map(team => {\n            const isFav = team.isFav\n            if (team.name === name) return { ...team, isFav: !isFav }\n            return team\n        })\n        this.setState({ teams: newTeams })\n\n\n    }\n\n    // Changing local after toggeling favorit icon state.\n    changingLocalStor = (name) => {\n        const localTeams = storageService.load('teams')\n        const changedTeams = localTeams.map(team => {\n            const isFav = team.isFav\n            if (team.name === name) return { ...team, isFav: !isFav }\n            return team\n        })\n        \n        storageService.store('teams', changedTeams)\n    }\n\n\n    render() {\n        const { teams } = this.state\n        return !teams.length ? <p>Loading.....</p> : <section className=\"main-section\">\n            <TeamList teams={teams} toggleFav={this.toggleFav} changingLocalStor={this.changingLocalStor} />\n        </section>\n\n    }\n}\n\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n\nimport Header from './cmps/Header'\nimport TeamsPage from './pages/TeamsPage'\n\nfunction App() {\n  return (\n    <container className=\"app\">\n    <Header/>\n    <Switch>\n    <Route component={TeamsPage} path=\"/\" />\n    </Switch>\n    </container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './style/global.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {   BrowserRouter as Router, } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}